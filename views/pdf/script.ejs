<!DOCTYPE html>
<script>
var PdfJs = function() {}

PdfJs.prototype.init = function() {
	this.url = '/upload/<%= presId %>.pdf',
	this.pdfDoc = null,
	this.pageNum = 1,
	this.scale = 1,
	this.canvas = document.getElementById('pdfCanvas'),

	console.log(this);
	this.ctx = this.canvas.getContext('2d');
	PDFJS.workerSrc = '/lib/pdf/pdf.js'
	PDFJS.getDocument(this.url).then(function getPdf(_pdfDoc) {
		this.pdfDoc = _pdfDoc;
		this.renderPage(this.pageNum);
	}.bind(this));

	window.onmessage = this.onMessage.bind(this);
}

PdfJs.prototype.renderPage = function(num) {
	// Using promise to fetch the page

	this.pdfDoc.getPage(num).then(function(page) {
		var origViewport = page.getViewport(1);

		var sx = origViewport.width / window.innerWidth;
		var sy = origViewport.height / window.innerHeight;
		this.scale = (1/Math.max(sx, sy))

		var viewport = page.getViewport(this.scale);
		this.canvas.height = viewport.height;
		this.canvas.width = viewport.width;

		// Render PDF page into canvas context
		var renderContext = {
			canvasContext: this.ctx,
			viewport: viewport
		};
		page.render(renderContext);
	}.bind(this));

	// Update page counters
	//document.getElementById('page_num').textContent = pageNum;
	//document.getElementById('page_count').textContent = pdfDoc.numPages;
}

//
// Go to previous page
//
PdfJs.prototype.back = function() {
	if (this.pageNum <= 1)
		return;
	this.pageNum--;
	this.renderPage(this.pageNum);
}

//
// Go to next page
//
PdfJs.prototype.forward = function() {
	if (this.pageNum >= this.pdfDoc.numPages)
		return;
	this.pageNum++;
	this.renderPage(this.pageNum);
}

PdfJs.prototype.onMessage = function(aEvent) {
    var cmd = aEvent.data;
    argv.forEach(function(e, i, a) { a[i] = decodeURIComponent(e) });

    if (cmd === "BACK")
      this.back();
    if (cmd === "FORWARD")
      this.forward();
}

$(document).ready(function() {
	var pdf = new PdfJs();
	pdf.init();
});

</script>
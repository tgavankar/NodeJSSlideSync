<script>
var PdfJs = {};

PdfJs.init = function() {
	this.url = '/upload/<%= presId %>.pdf',
	this.pdfDoc = null,
	this.idx = 1,
	this.scale = 1,
	this.canvas = document.getElementById('pdfCanvas'),
	this.remoteWindows = [window];
	this.remWindsQueue = [];

	this.ctx = this.canvas.getContext('2d');
	PDFJS.workerSrc = '/lib/pdf/pdf.js'
	PDFJS.getDocument(this.url).then(function getPdf(_pdfDoc) {
		this.pdfDoc = _pdfDoc;
		this.renderPage(this.idx);
		for(win in this.remWindsQueue)
			this.postMsg(this.remWindsQueue[win], "REGISTERED", document.title, this.pdfDoc.numPages);
	}.bind(this));
	this.setupTouchEvents();
	window.onmessage = this.onMessage.bind(this);
	window.onresize = this.onResize.bind(this);
	window.onkeydown = this.onKeyDown.bind(this);
	window.onhashchange = this.onHashChange.bind(this);
}

PdfJs.renderPage = function(num) {
	// Using promise to fetch the page

	this.pdfDoc.getPage(num).then(function(page) {
		var origViewport = page.getViewport(1);

		var sx = origViewport.width / window.innerWidth;
		var sy = origViewport.height / window.innerHeight;
		this.scale = (1/Math.max(sx, sy))

		var viewport = page.getViewport(this.scale);
		this.canvas.height = viewport.height;
		this.canvas.width = viewport.width;

		// Render PDF page into canvas context
		var renderContext = {
			canvasContext: this.ctx,
			viewport: viewport
		};
		page.render(renderContext);
	}.bind(this));
}

//
// Go to previous page
//
PdfJs.back = function() {
	this.setPage(this.idx-1);
}

//
// Go to next page
//
PdfJs.forward = function() {
	if (this.idx >= this.pdfDoc.numPages)
		return;
	this.setPage(this.idx+1)
}

PdfJs.setPage = function(newPage) {
	this.updateHash(newPage);
}

PdfJs.onMessage = function(aEvent) {
	var argv = aEvent.data.split(" "), argc = argv.length;
	argv.forEach(function(e, i, a) { a[i] = decodeURIComponent(e) });
	var win = aEvent.source;
	if (argv[0] === "REGISTER" && argc === 1) {
		this.remWindsQueue.push(win);
		this.remoteWindows.push(win);
		this.postMsg(win, "CURSOR", this.idx);
		return;
	}
	if (argv[0] === "BACK" && argc === 1)
      this.back();
    if (argv[0] === "FORWARD" && argc === 1)
      this.forward();
	if (argv[0] === "SET_CURSOR" && argc === 2)
		this.updateHash(argv[1]);
	if (argv[0] === "GET_CURSOR" && argc === 1)
		this.postMsg(win, "CURSOR", this.idx);
}

PdfJs.updateHash = function(str) {
	if(window.history.replaceState) {
		window.history.replaceState({}, "", "#" + str);
		$(window).trigger('hashchange');
	}
	else {
		window.location.hash = "#" + str;
	}
}

PdfJs.postMsg = function(aWin, aMsg) {
	aMsg = [aMsg];
	for (var i = 2; i < arguments.length; i++)
		aMsg.push(encodeURIComponent(arguments[i]));
	aWin.postMessage(aMsg.join(" "), "*");
}

PdfJs.onHashChange = function() {
	var cursor = window.location.hash.split("#")[1];
	var newPage = 1;
	if(cursor) {
		newPage = parseInt(cursor);
	}
	if(newPage >= 1 && newPage <= this.pdfDoc.numPages) {
		this.idx = newPage;
		this.renderPage(this.idx);
	}

	for (var i = 0; i < this.remoteWindows.length; i++) {
		this.postMsg(this.remoteWindows[i], "CURSOR", this.idx);
	}
}

PdfJs.onResize = function(aEvent) {
	this.renderPage(this.idx);
}

PdfJs.setupTouchEvents = function() {
	var orgX, newX;
	var tracking = false;

	var db = document.body;
	db.addEventListener("touchstart", start.bind(this), false);
	db.addEventListener("touchmove", move.bind(this), false);

	function start(aEvent) {
		aEvent.preventDefault();
		tracking = true;
		orgX = aEvent.changedTouches[0].pageX;
	}

	function move(aEvent) {
		if (!tracking) return;
		newX = aEvent.changedTouches[0].pageX;
		if (orgX - newX > 100) {
			tracking = false;
			this.forward();
		} else {
			if (orgX - newX < -100) {
				tracking = false;
				this.back();
			}
		}
	}
}

PdfJs.onKeyDown = function(aEvent) {
	// Don't intercept keyboard shortcuts
	if (aEvent.altKey
		|| aEvent.ctrlKey
		|| aEvent.metaKey
		|| aEvent.shiftKey) {
		return;
	}
	if ( aEvent.keyCode == 37 // left arrow
	|| aEvent.keyCode == 38 // up arrow
	|| aEvent.keyCode == 33 // page up
	) {
		aEvent.preventDefault();
	this.back();
	}
	if ( aEvent.keyCode == 39 // right arrow
	|| aEvent.keyCode == 40 // down arrow
	|| aEvent.keyCode == 34 // page down
	) {
		aEvent.preventDefault();
	this.forward();
	}
}

$(document).ready(function() {
	PdfJs.init();
});

</script>
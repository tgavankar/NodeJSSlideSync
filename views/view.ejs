<!DOCTYPE html>

<meta charset="utf-8">
<title><%= title %></title>
<script src="/lib/jquery-1.8.2.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<span id="presId" style="display: none;"><%= presId %></span>
<span id="presType" style="display: none;"><%= presType %></span>


<div id="follower">Stop Following</div>

<style>
 #follower {
    display: none;
    background-color: #AAA;
    position: absolute;
    top: 15px;
    right: 15px;
    opacity: 0.25;
    filter: alpha(25);
    color: black;
    cursor: pointer;
    padding: 15px;
    border-radius: 12px;
    font-family: 'Oswald', arial, serif;
    z-index: 10;
    text-shadow: 1px 1px 0 #FFF;
  }

  #follower:hover {
    opacity: 0.75;
    filter: alpha(75);
  }
</style>

<% if(presType === "dzslides") { %>
  <style>
    <%- css %>
  </style>
  <%- html %>
  <%- include dzslides/view.ejs %>
<% } else if(presType === "pdf") { %>
  <style>
    html, body {
      background-color: black;
      height: 100%;
      width: 100%;
    }

    .valign {
      position: relative;
      height: 100%;
    }

    #pdfCanvas {
      margin: auto;
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
    }
  </style>
  
  <link rel="stylesheet" href="/css/reset.css">

  <div class="valign">
      <canvas id="pdfCanvas"></canvas>
  </div>
  
  <script src="/lib/pdf/pdf.js"></script>
  <script src="/lib/pdf/compatibility.js"></script>
  <%- include pdf/script.ejs %>
<% } %>
<!-- *************************************** -->
<script src="/js/<%- jsfile %>"></script>
<!-- *************************************** -->


<script> // Helpers
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {

      // closest thing possible to the ECMAScript 5 internal IsCallable
      // function 
      if (typeof this !== "function")
      throw new TypeError(
        "Function.prototype.bind - what is trying to be fBound is not callable"
      );

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function () {},
          fBound = function () {
            return fToBind.apply( this instanceof fNOP ? this : oThis || window,
                   aArgs.concat(Array.prototype.slice.call(arguments)));
          };

      fNOP.prototype = this.prototype;
      fBound.prototype = new fNOP();

      return fBound;
    };
  }

  var fjq = (HTMLElement.prototype.fjq = function(aQuery) {
    return this.querySelector(aQuery);
  }).bind(document);

  var fjqa = (HTMLElement.prototype.fjqa = function(aQuery) {
    return this.querySelectorAll(aQuery);
  }).bind(document);

  fjqa.forEach = function(nodeList, fun) {
    Array.prototype.forEach.call(nodeList, fun);
  }

</script>
<!-- vim: set fdm=marker: }}} -->

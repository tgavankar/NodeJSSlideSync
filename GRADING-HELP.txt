Author:
Tanay Gavankar (tgavanka)

NOTE: All the code positions I've given are just examples of that feature. There are similar (and other) usages of that technology elsewhere, and if for some reason you need more examples and are unable to find them, please let me know. I have also included more than 10, so please pick the top 10 that you feel were the strongest for grading.

Required Elements:
Javascript
	- Objects / prototypes
		- public/js/presenter.js and public/js/viewer.js
		- views/pdf/script.ejs

HTML
	- Tables
		- Used to display the list of presentations linked to your account as well as available options for them.
		- views/list.ejs:32
	- Forms w/ validation
		- Validates inputs on forms that have requirements.
		- HTML5 "required" and "pattern" attr
			- views/register.ejs:58,62,66
			- views/login.ejs:51,55
	- HTML5 Accessibility Tags
		- Uses accessibility tags to support screen-readers, etc.
		- <header> - views/parts/top.ejs:34
		- <footer> - views/parts/bottom.ejs:18
		- <nav> - views/parts/bottom.ejs:3

CSS
	- Reset
		- Reset all styles for browser consistency.
		- public/css/reset.css (used in all pages, i.e. views/parts/top.ejs:7)
	- Pseudo-selectors
		- Used for navigation bar and list page.
		- :last-child - public/css/style.css:133
		- :nth-of-type - public/css/style.css:389-396,422-429,440-448
		- :before - public/css/style.css:431
				- views/present.ejs:124,129
	- Media queries
		- Used to reflow layout depending on screen size.
		- min-width: public/css/style.css:310
		- max-width: public/css/style.css:399
	- Fluid Layouts
		- Resize homepage on desktop
			- Navbar moves from top to bottom
			- Homepage splash image disappears
			- Pure CSS (media-queries)
		- Resize /list on desktop
			- Table reflows from full table to vertical accordian
			- Pure CSS, including vertical accordian (uses :target / media-queries)
	- Animations
		- Used for any AJAX form submit (i.e. "/login")
		- Ajax Loading Icon
			- public/css/style.css:266-299

DOM Manipulation
	- Show/hide AJAX loading icon
		- views/login.ejs:7,32
		- All other forms
	- Disable form submit on AJAX
		- views/login.ejs:8,33
		- All other forms
	- Update AJAX response (i.e. success/error)
		- views/login.ejs:20
		- All forms
	- Presentation changes page on page turn

jQuery
	- See DOM Manipulation section
	- Event handling
		- public/js/viewer.js:29,39

AJAX client
	- Submit POST
		- views/login.ejs:36
		- All forms

AJAX server
	- Handle POST
		- loginRoutes.js:31,42
		- presRoutes.js:98,174,215

Node.js (with Express)
	- [*]Routes.js
	- Express used for routes
	- Custom middleware for auth checking
		- middleware/ensureAuthenticated.js
	- CSRF middleware
		- app.js:39
	- Custom 404 page
		- app.js:53
	- All fields validated server-side, with 400 response on invalid (Bad Request)
		- loginRoutes.js:46,50,54,etc
		- presRoutes.js:158,177,180,etc

Socket.IO
	- Used for communication between clients and server for updating slide position.
	- socketSrv.js (server)
	- public/js/presenter.js:19,28
	- public/js/viewer.js:15,20

MongoDB via Mongoose
	- Used to store saved presentations and user accounts.
	- presRoutes.js:13,89,136,228
	- loginRoutes.js:57

Redis
	- Used to store generated security keys (nonces) for presenters. This helps verify that the update slide 	messages are correctly authenticated.
	- redisRoutes.js:24
	- socketSrv.js:20

window.postMessage
	- Used to communicate and send messages between windows open on the client machine (i.e. from parent frame to iframe). These messages are wrapped to also be forwarded via socketIO so as to enable communication across multiple viewers' machines.
	- views/pdf/script.ejs:105
	- public/js/presenter.js:21

Server-side Filesystem API
	- Used to handle uploaded PDFs.
	- presRoutes.js:123-128

HTML5 History API
	- Slide positions are stored in the URL hash fragment and updated via the HTML5 history API (replaceState). This allows for navigating the slides without a new server request (saves on bandwidth costs) and additionally means that users do not have to hit the back button on their browser for every slide change. (Specifically, when viewing a presentation, hitting the back button will take you straight back to the previous page, rather than the previous slide.)
	- Event listeners are bound to the onhashchange event so the page is updated quickly.
	- views/pdf/script.js:91

General Security
	- CSRF Protection
		- All AJAX calls are protected from CSRF attacks by CSRF tokens.
	- Replay and imposter attack prevention
		- The presenter view has to sign each "update page" action with a key generated by the server, which is received upon registering as an authorized user. This protects from replay attacks and imposter attacks.
	- HTTPS (planned)
		- In production, SlideSync would be served under HTTPS - this app is not because introducing SSL certs causes a lot of issues (it's not a simple "change to https") that I did not have time to address, as well as the additional monetary costs of having a valid SSL cert (self-signed certs can also bring up issues).
	- Input Sanitization
		- Allowing for custom user input opens XSS vulnerabilities, so all inputs are sanitized and XSS vulnerabilities are for the most part removed. (Of course, it is not possible to protect against ALL forms of XSS, as that is its very nature - new XSS vectors are constantly discovered.)
